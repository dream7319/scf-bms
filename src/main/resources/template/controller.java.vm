package ${package.Controller};

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PathVariable;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.google.common.collect.Maps;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.ObjectUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;
import ${package.Entity}.${entity};;
import ${package.Service}.${table.serviceName};

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/${table.entityPath}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

	private final static Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    private I${entity}Service ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Service;

	/**
	* 分页查询列表
	*/
	@GetMapping("/lists")
    public Map<String,Object> get${entity}s(@RequestParam(value="current",defaultValue = "1") Integer current,
						@RequestParam(value="size",defaultValue = "5") Integer size){
		Map<String,Object> results = Maps.newHashMap();
		EntityWrapper<${entity}> wrapper = new EntityWrapper<${entity}>();
		Page<${entity}> lists = ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Service.selectPage(new Page<${entity}>(current, size),wrapper);
		results.put("datas",lists);
		return results;
	}

	/**
	* 根据id查询
	*/
	@GetMapping("/{id}")
	public Map<String,Object> get${entity}ById(@PathVariable Integer id){
		Map<String,Object> results = Maps.newHashMap();
		if(StringUtils.isNotEmpty(ObjectUtils.toString(id))){
			${entity} ${entity.substring(0,1).toLowerCase()}${entity.substring(1)} = ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Service.selectById(id);
			results.put("${entity.substring(0,1).toLowerCase()}${entity.substring(1)}",${entity.substring(0,1).toLowerCase()}${entity.substring(1)});
		}else {
			results.put("${entity.substring(0,1).toLowerCase()}${entity.substring(1)}", new ${entity}());
		}
		return results;
    }

	/**
	* 添加
	*/
	@PostMapping("/add")
    public Map<String,Object> insert${entity}(${entity} ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}){
		Map<String,Object> results = Maps.newHashMap();
		results.put("result","error");

		try{
			if(entity != null){
                Integer num = ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Service.insert${entity}(${entity.substring(0,1).toLowerCase()}${entity.substring(1)});
                if(num > 0){
                    results.put("result","success");
                }
		    }
		}catch(Exception e){
			logger.error("保存失败："+e.getMessage());
		}
        return results;
    }
	/**
	* 删除
	*/
	@DeleteMapping("/delete/{id}")
	public Map<String,Object> delete${entity}ById(@PathVariable("id") Integer id){
		Map<String,Object> results = Maps.newHashMap();
		results.put("result","error");
		try {
			if(StringUtils.isNotEmpty(ObjectUtils.toString(id))){
				int num = ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Service.delete${entity}ById(id);
				if(num > 0){
					results.put("result","success");
				}
			}
		}catch (Exception e){
			logger.error(e.getMessage());
		}
		return results;
	}

	/**
	* 更新
	*/
	@PutMapping("/update")
	public Map<String,Object> update${entity}ById(@RequestBody ${entity} ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}){
		Map<String,Object> results = Maps.newHashMap();
		results.put("result","error");
		try {
			if(user != null){
				int num = ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}Service.update${entity}ById(${entity.substring(0,1).toLowerCase()}${entity.substring(1)});
				if(num > 0){
					results.put("result","success");
				}
			}
		}catch (Exception e){
			logger.error(e.getMessage());
		}
		return results;
	}
}
