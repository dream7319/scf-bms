tail -n 100 xxx.log | more -1 总共读取100行，每屏显示1行数
tail xxx.log -n 300 -f  查看底部即最新300条日志记录，并实时刷新
tail -f xxx.log  监视xxx.log文件的尾部内容（默认10行，相当于增加参数 -n 10），刷新显示在屏幕上。退出，按下CTRL+C
tail -n 20 filename 显示filename最后20行。
tail -r -n 10 filename 逆序显示filename最后10行
跟tail功能相似的命令还有：
cat 从第一行開始显示档案内容。
tac 从最后一行開始显示档案内容。
more 分页显示档案内容。
less 与 more 相似，但支持向前翻页
head 仅仅显示前面几行
tail 仅仅显示后面几行
n 带行号显示档案内容
od 以二进制方式显示档案内容

1、yum update && yum upgrade --yum更新升级
2、yum -y install lrzsz --安装sz下载,rz上传命令
3、yum -y install wget  --安装wget命令
4、rpm -ivh xxx.rpm 安装 xxx.rpm 包并在安装过程中显示正在安装的文件信息及安装进度
5、rpm -e xxx 卸载
6、cat /etc/redhat-release 查看当前系统版本
7、getconf LONG_BIT 查看当前系统位数
8、yum -y install vim 安装vim命令

------------------------yum安装mysql-------------------------
1、wget http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 下载mysql源安装包

2、yum localinstall mysql57-community-release-el7-11.noarch.rpm 安装mysql源

3、yum repolist enabled | grep "mysql.*-community.*" 检查mysql源是否安装成功

4、修改vim /etc/yum.repos.d/mysql-community.repo源
	enabled=1启用 0:禁用,配置需要安装的版本

5、yum install mysql-community-server 安装mysql

6、systemctl start mysqld 启动mysql

7、systemctl status mysqld 查看mysql状态

8、	systemctl enable mysqld
	systemctl daemon-reload 开机启动

9、修改密码
	Ⅰ修改密码策略：vim /etc/my.cnf	
		添加：validate_password = off 关闭密码策略
	II  systemctl restart mysqld 重新启动mysql服务使配置生效
	III grep 'temporary password' /var/log/mysqld.log 查看生成的临时密码
	IV  mysql -uroot -p	输入密码
	V   set password for 'root'@'localhost'=password('root') 修改密码

10、授权远程连接

mysql>grant all privileges on *.* to 'root'@'%' identified by 'root' with grant option;
mysql>flush privileges;

11、安装yum -y install iptables-services

12、开放3306端口
	I、	vim /etc/sysconfig/iptables
	II、	添加-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT
	III、	service iptables restart  重启防火墙


-----------------完成mysql安装--------------------------------

系统： 
# uname -a   # 查看内核/操作系统/CPU信息 
# cat /etc/issue 
# cat /etc/redhat-release # 查看操作系统版本 
# cat /proc/cpuinfo  # 查看CPU信息 
# hostname   # 查看计算机名 
# lspci -tv   # 列出所有PCI设备 
# lsusb -tv   # 列出所有USB设备 
# lsmod    # 列出加载的内核模块 
# env    # 查看环境变量 
资源： 
# free -m   # 查看内存使用量和交换区使用量 
# df -h    # 查看各分区使用情况 
# du -sh <目录名>  # 查看指定目录的大小 
# grep MemTotal /proc/meminfo # 查看内存总量 
# grep MemFree /proc/meminfo # 查看空闲内存量 
# uptime   # 查看系统运行时间、用户数、负载 
# cat /proc/loadavg  # 查看系统负载 
磁盘和分区： 
# mount | column -t  # 查看挂接的分区状态 
# fdisk -l   # 查看所有分区 
# swapon -s   # 查看所有交换分区 
# hdparm -i /dev/hda  # 查看磁盘参数(仅适用于IDE设备) 
# dmesg | grep IDE  # 查看启动时IDE设备检测状况 
网络： 
# ifconfig   # 查看所有网络接口的属性 
# iptables -L   # 查看防火墙设置 
# route -n   # 查看路由表 
# netstat -lntp   # 查看所有监听端口 
# netstat -antp   # 查看所有已经建立的连接 
# netstat -s   # 查看网络统计信息 
进程： 
# ps -ef   # 查看所有进程 
# top    # 实时显示进程状态（另一篇文章里面有详细的介绍） 
用户： 
# w    # 查看活动用户 
# id <用户名>   # 查看指定用户信息 
# last    # 查看用户登录日志 
# cut -d: -f1 /etc/passwd # 查看系统所有用户 
# cut -d: -f1 /etc/group # 查看系统所有组 
# crontab -l   # 查看当前用户的计划任务 
服务： 
# chkconfig –list  # 列出所有系统服务 
# chkconfig –list | grep on # 列出所有启动的系统服务 
程序： 
# rpm -qa   # 查看所有安装的软件包


----------------------安装maven-------------------------------
1、rz 上传文件
2、tar zxvf apache-maven-3.3.9-bin.tar.gz 解压文件
3、vim /etc/profile 
添加：  export JAVA_HOME=/usr/java/jdk1.8.0_144
	export M2_HOME=/usr/local/maven/apache-maven-3.5.0
	export PATH=$PATH:$M2_HOME/bin
4、source /etc/profile
5、mvn -v

----------------------安装git-------------------------------
两种方法：
第一种：
1、yum git 安装即可,安装版本不是最新版本
2、yum remove git 卸载git

第二种
1、下载编译工具
yum -y groupinstall "Development Tools" 
2、下载依赖包(可以先不安装)
yum  -y install zlib-devel perl-ExtUtils-MakeMaker asciidoc xmlto openssl-devel
3、下载 Git 最新版本的源代码
wget https://www.kernel.org/pub/software/scm/git/git-2.14.1.tar.gz
4、解压
tar -zxvf git-2.14.1.tar.gz
5、进入目录配置
./configure --prefix=/usr/local/git
6、安装
make && make install
7、配置全局路径
export PATH="/usr/local/git/bin:$PATH"
source /etc/profile

--------------------------------------------------------------------------------
克隆maven项目
1、git clone https://github.com/dream7319/scf-bms.git
2、进入scf-bms目录
3、mvn package

Maven最常见的几个生命周期的阶段：

validate（验证）:  验证项目正确，并且所有必要信息可用。
compile（编译）: 编译项目源码
test（测试）: 使用合适的单元测试框架测试编译后的源码。
package（打包）: 源码编译之后，使用合适的格式（例如JAR格式）对编译后的源码进行打包。
integration-test（集成测试）: 如果有需要，把包处理并部署到可以运行集成测试的环境中去。
verify（验证）: 进行各种测试来验证包是否有效并且符合质量标准。
install（安装）: 把包安装到本地仓库，使该包可以作为其他本地项目的依赖。
deploy（部署）: 在集成或发布环境中完成，将最终软件包复制到远程存储库，以与其他开发人员和项目共享。
--------------------------------------------------------------------------------------------------



















