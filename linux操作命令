tail -n 100 xxx.log | more -1 总共读取100行，每屏显示1行数
tail xxx.log -n 300 -f  查看底部即最新300条日志记录，并实时刷新
tail -f xxx.log  监视xxx.log文件的尾部内容（默认10行，相当于增加参数 -n 10），刷新显示在屏幕上。退出，按下CTRL+C
tail -n 20 filename 显示filename最后20行。
tail -r -n 10 filename 逆序显示filename最后10行
跟tail功能相似的命令还有：
cat 从第一行開始显示档案内容。
tac 从最后一行開始显示档案内容。
more 分页显示档案内容。
less 与 more 相似，但支持向前翻页
head 仅仅显示前面几行
tail 仅仅显示后面几行
n 带行号显示档案内容
od 以二进制方式显示档案内容

ntpdate cn.pool.ntp.org 同步网络时间

linux centos重启命令：
　　1、reboot
　　2、shutdown -r now 立刻重启(root用户使用)
　　3、shutdown -r 10 过10分钟自动重启(root用户使用)
　　4、shutdown -r 20:35 在时间为20:35时候重启(root用户使用)
　　如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启
Linux centos关机命令：
　　1、halt 立刻关机
　　2、poweroff 立刻关机
　　3、shutdown -h now 立刻关机(root用户使用)
　　4、shutdown -h 10 10分钟后自动关机



1、yum update && yum upgrade --yum更新升级
2、yum -y install lrzsz --安装sz下载,rz上传命令
3、yum -y install wget  --安装wget命令
4、rpm -ivh xxx.rpm 安装 xxx.rpm 包并在安装过程中显示正在安装的文件信息及安装进度
5、rpm -e xxx 卸载
6、cat /etc/redhat-release 查看当前系统版本
7、getconf LONG_BIT 查看当前系统位数
8、yum -y install vim 安装vim命令

------------------------yum安装mysql-------------------------
1、wget http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 下载mysql源安装包

2、yum localinstall mysql57-community-release-el7-11.noarch.rpm 安装mysql源

3、yum repolist enabled | grep "mysql.*-community.*" 检查mysql源是否安装成功

4、修改vim /etc/yum.repos.d/mysql-community.repo源
	enabled=1启用 0:禁用,配置需要安装的版本

5、yum install mysql-community-server 安装mysql

6、systemctl start mysqld 启动mysql

7、systemctl status mysqld 查看mysql状态

8、systemctl enable mysqld

9、修改密码
	Ⅰ修改密码策略：vim /etc/my.cnf	
		添加：validate_password = off 关闭密码策略
	II  systemctl restart mysqld 重新启动mysql服务使配置生效
	III grep 'temporary password' /var/log/mysqld.log 查看生成的临时密码
	IV  mysql -uroot -p	输入密码
	V   set password for 'root'@'localhost'=password('root') 修改密码

10、授权远程连接

mysql>grant all privileges on *.* to 'root'@'%' identified by 'root' with grant option;
mysql>flush privileges;

11、安装yum -y install iptables-services

12、开放3306端口
	I、	vim /etc/sysconfig/iptables
	II、	添加-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT
	III、	service iptables restart  重启防火墙


13、开启binlog
vim /etc/my.cnf

log_bin=ON
log_bin_basename=/var/lib/mysql/mysql-bin
log_bin_index=/var/lib/mysql/mysql-bin.index
三个参数来指定，
第一个参数是打开binlog日志
第二个参数是binlog日志的基本文件名，后面会追加标识来表示每一个文件
第三个参数指定的是binlog文件的索引文件，这个文件管理了所有的binlog文件的目录

当然也有一种简单的配置，一个参数就可以搞定
log-bin=/var/lib/mysql/mysql-bin

skip_ssl 版本5.7之后会有ssl验证，跳过

这些配置完毕之后对于5.7以下版本应该是可以了，但是我们这个时候用的如果是5.7及以上版本的话，
重启mysql服务会报错。这个时候我们必须还要指定一个参数
server-id=123454

service mysqld restart重启

show variables like '%log_bin%'查看

关于binlog：
1.binlog文件会随服务的启动创建一个新文件
2.通过flush logs 可以手动刷新日志，生成一个新的binlog文件
3.通过show master status 可以查看binlog的状态
4.通过reset master 可以清空binlog日志文件
5.通过mysqlbinlog 工具可以查看binlog日志的内容
6.通过执行dml，mysql会自动记录binlog
7.show binlog events 查看binlog日志事件

yum install firewalld安装防火墙
systemctl stop firewalld.service #停止firewall
systemctl disable firewalld.service #禁止firewall开机启动
firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）
firewalld 开放单个端口命令如下 
firewall-cmd --permanent --zone=public --add-port=100/tcp 
firewall-cmd --permanent --zone=public --add-port=100/udp 
firewall-cmd --reload 
开放多个端口
firewall-cmd --permanent --zone=public --add-port=100-500/tcp 
firewall-cmd --permanent --zone=public --add-port=100-500/udp 
firewall-cmd --reload


# 启动和关闭 MySQL Server
service mysqld start
service mysqld status
service mysqld stop
service mysqld restart重启


mysql>mysql -uroot -proot -h192.168.1.8  -P3306 -Dmysql 连接远程数据库
	  mysql -u用户名 -p密码 -h远程数IP   -P端口 -D数据库名

卸载：
1、yum list installed mysql* 查看MySQL是否安装:
或rpm -qa | grep -i mysql

2、yum remove mysql mysql-devel mysql-server mysql-libs compat-mysql57

3、rm -rf /var/lib/mysql

4、rm /etc/my.cnf

5、rpm -aq | grep -i mysql

6、rpm -e 第五步出现的名称

7、whereis mysql	删除目录



-----------------完成mysql安装--------------------------------

系统： 
# uname -a   # 查看内核/操作系统/CPU信息 
# cat /etc/issue 
# cat /etc/redhat-release # 查看操作系统版本 
# cat /proc/cpuinfo  # 查看CPU信息 
# hostname   # 查看计算机名 
# lspci -tv   # 列出所有PCI设备 
# lsusb -tv   # 列出所有USB设备 
# lsmod    # 列出加载的内核模块 
# env    # 查看环境变量 
资源： 
# free -m   # 查看内存使用量和交换区使用量 
# df -h    # 查看各分区使用情况 
# du -sh <目录名>  # 查看指定目录的大小 
# grep MemTotal /proc/meminfo # 查看内存总量 
# grep MemFree /proc/meminfo # 查看空闲内存量 
# uptime   # 查看系统运行时间、用户数、负载 
# cat /proc/loadavg  # 查看系统负载 
磁盘和分区： 
# mount | column -t  # 查看挂接的分区状态 
# fdisk -l   # 查看所有分区 
# swapon -s   # 查看所有交换分区 
# hdparm -i /dev/hda  # 查看磁盘参数(仅适用于IDE设备) 
# dmesg | grep IDE  # 查看启动时IDE设备检测状况 
网络： 
# ifconfig   # 查看所有网络接口的属性 
# iptables -L   # 查看防火墙设置 
# route -n   # 查看路由表 
# netstat -lntp   # 查看所有监听端口 
# netstat -antp   # 查看所有已经建立的连接 
# netstat -s   # 查看网络统计信息 
进程： 
# ps -ef   # 查看所有进程 
# top    # 实时显示进程状态（另一篇文章里面有详细的介绍） 
用户： 
# w    # 查看活动用户 
# id <用户名>   # 查看指定用户信息 
# last    # 查看用户登录日志 
# cut -d: -f1 /etc/passwd # 查看系统所有用户 
# cut -d: -f1 /etc/group # 查看系统所有组 
# crontab -l   # 查看当前用户的计划任务 
服务： 
# chkconfig –list  # 列出所有系统服务 
# chkconfig –list | grep on # 列出所有启动的系统服务 
程序： 
# rpm -qa   # 查看所有安装的软件包


----------------------安装maven-------------------------------
1、rz 上传文件
2、tar zxvf apache-maven-3.3.9-bin.tar.gz 解压文件
3、vim /etc/profile 
添加：  export JAVA_HOME=/usr/java/jdk1.8.0_144
	export M2_HOME=/usr/local/maven/apache-maven-3.5.0
	export PATH=$PATH:$M2_HOME/bin
4、source /etc/profile
5、mvn -v

----------------------安装git-------------------------------
两种方法：
第一种：
1、yum git 安装即可,安装版本不是最新版本
2、yum remove git 卸载git

第二种
1、下载编译工具
yum -y groupinstall "Development Tools" 
2、下载依赖包(可以先不安装)
yum  -y install zlib-devel perl-ExtUtils-MakeMaker asciidoc xmlto openssl-devel
3、下载 Git 最新版本的源代码
wget https://www.kernel.org/pub/software/scm/git/git-2.14.1.tar.gz
4、解压
tar -zxvf git-2.14.1.tar.gz
5、进入目录配置
./configure --prefix=/usr/local/git
6、安装
make && make install
7、配置全局路径
export PATH="/usr/local/git/bin:$PATH"
source /etc/profile

--------------------------------------------------------------------------------
克隆maven项目
1、git clone https://github.com/dream7319/scf-bms.git
2、进入scf-bms目录
3、mvn package
4、java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App

Maven最常见的几个生命周期的阶段：

validate（验证）:  验证项目正确，并且所有必要信息可用。
compile（编译）: 编译项目源码
test（测试）: 使用合适的单元测试框架测试编译后的源码。
package（打包）: 源码编译之后，使用合适的格式（例如JAR格式）对编译后的源码进行打包。
integration-test（集成测试）: 如果有需要，把包处理并部署到可以运行集成测试的环境中去。
verify（验证）: 进行各种测试来验证包是否有效并且符合质量标准。
install（安装）: 把包安装到本地仓库，使该包可以作为其他本地项目的依赖。
deploy（部署）: 在集成或发布环境中完成，将最终软件包复制到远程存储库，以与其他开发人员和项目共享。
--------------------------------------------------------------------------------------------------


-------------------------------------elasticsearch安装--------------------------------------------
开放9200、9300端口
vim /etc/sysconfig/iptables
-A INPUT -p tcp -m state --state NEW -m tcp --dport 9200 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 9300 -j ACCEPT

service iptables restart 重启

1、下载elasticsearch-5.5.2.tar.gz
2、rz 上传到目录下
3、tar -zxvf elasticsearch-5.5.2.tar.gz
4、mv elasticsearch-5.5.2 -C /usr/local/elasticsearch-5.5.2 移动目录
5、useradd elastic	添加用户
6、chown -R elastic:elastic elasticsearch-5.5.2 赋权限
7、su elastic 
8、sh /usr/local/elasticsearch-5.5.2/bin/elasticsearch -d启动
9、curl http://localhost:9200
elasticsearch默认restful-api的端口是9200 不支持Ip地址，只能在本机用http://localhost:9200来访问。
如果需要改变，需要修改配置文件。

1、vim /usr/local/elasticsearch-5.5.2/conf/elasticsearch.yml
2、network.host: 192.168.151.14
   http.port: 9200
3、su root 
4、vim /etc/security/limits.conf
添加
* soft nofile 65536
* hard nofile 131072
* soft nproc 2048
* hard nproc 4096
5、vi /etc/sysctl.conf
添加
vm.max_map_count=655360
6、执行 sysctl -p

重新启动elasticsearch

安装head插件
1、下载nodejs,最新版本为node-v8.4.0
下载地址：http://cdn.npm.taobao.org/dist/node/v8.4.0/node-v8.4.0.tar.gz
2、上传到服务器
3、./configure
4、make	时间比较长
5、sudo make install
6、node --version 
   npm --version
7、npm install -g grunt-cli
   grunt --version
8、进入/usr/local/elastic-plugins
   克隆head代码
   git clone git://github.com/mobz/elasticsearch-head.git
9、进入elasticsearch-head目录
   npm install

10、修改_site/app.js
	把this.base_uri = this.config.base_uri || this.prefs.get("app-base_uri") || "http://localhost:9200";
	修改为：
	this.base_uri = this.config.base_uri || this.prefs.get("app-base_uri") || "http://192.168.151.14:9200";
11、修改Gruntfile.js
    connect: {
			server: {
				options: {
					hostname:'0.0.0.0',####新增
					port: 9100,
					base: '.',
					keepalive: true
				}
			}
		}
		
		
		grunt server & 后台运行
		./elasticsearch -d 后台运行elasticsearch
12、elasticsearch-5.5.2/config/elasticsearch.yml
    添加：
	http.cors.enabled: true
	http.cors.allow-origin: "*"
	
	解开注释：
	cluster.name: lierl
  
   注意：elasticsearch-head不能放到 elasticsearch-5.5.2/plugins下面
   
----------------------------------------------------------------------------------------------------------------

vim /etc/sysconfig/network-scripts/ifcfg-eth0  

配置ip
TYPE=Ethernet
BOOTPROTO=static  #启用静态IP地址
DEFROUTE=yes
PEERDNS=yes
PEERROUTES=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
IPV6_FAILURE_FATAL=no
NAME=ens33
UUID=4be07929-15e9-4049-8679-8fa809b5389d
ONBOOT=yes              #开启自动启用网络连接
IPADDR0=192.168.169.22  #设置IP地址
PREFIXO0=24             #设置子网掩码
GATEWAY0=192.168.169.2  #设置网关
DNS1=114.114.114.114    #这个是国内的DNS地址，是固定的；

service network restart   #重启网络
--------------------------------------------------------------------------------------------
------------------------------------安装nginx-----------------------------------------------
下载nginx
1、wget http://124.205.69.171/files/5054000005BC0340/nginx.org/download/nginx-1.12.1.tar.gz
2、进入nginx
   ./configure
3、make
4、make install
5、进入/usr/local/nginx/sbin
    ./nginx 			启动nginx
	./nginx -s stop		此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。
	./nginx -s quit		此方式停止步骤是待nginx进程处理任务完毕进行停止。
	./nginx -s reload

启用nginx命令
	#方法1 
	# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 
	#方法2 
	# cd /usr/local/nginx/sbin 
	# ./nginx 
停止nginx命令
	#查询nginx主进程号  
	ps -ef | grep nginx 
	#停止进程  
	kill -QUIT 主进程号  
	#快速停止  
	kill -TERM 主进程号  
	#强制停止  
	pkill -9 nginx 
重启nginx命令
./nginx -s reload 
	
	
	
./configure --prefix=/opt/nginx 
configure --prefix 配置，后面的目录，不能是安装包当前的解压目录，因为后面再install过程中，
会从解压包中拷贝配置文件到指定的prefix中去，如果这两个目录相同，cp失效出现 the same file 的错误，
导致install 终止，安装会失败
--------------------------------------------------------------------------------------------

redis安装
1、wget http://download.redis.io/releases/redis-4.0.1.tar.gz
2、make 
3、make install 
4、make test 测试是否安装ok
	如果没有错误说明安装ok,如果报错tcl
	yum install tcl
5、wget https://jaist.dl.sourceforge.net/project/tcl/Tcl/8.6.7/tcl8.6.7-src.tar.gz
6、cd unix
7、make && make install
进入redis目录下运行make test
如果出现All tests passed without errors! 则安装完成

8、查看/usr/local/bin/下是否有redis-server等文件 ls redis*
	如果没有，则执行以下命令
	cp redis-server /usr/local/bin/
	cp redis-cli /usr/local/bin/
	
	默认端口是6379
9、查看redis
	ps -ef | grep redis 
	通过启动命令检查Redis服务器状态  
	netstat -nlt|grep 6379 

停止Redis实例
pkill redis-server

设置redis随机启动
进入redis目录
./utils/install_server.sh
一路回车
[root@lierl utils]# ./install_server.sh 
Welcome to the redis service installer
This script will help you easily set up a running redis server

Please select the redis port for this instance: [6379] 
Selecting default: 6379
Please select the redis config file name [/etc/redis/6379.conf] 
Selected default - /etc/redis/6379.conf
Please select the redis log file name [/var/log/redis_6379.log] 
Selected default - /var/log/redis_6379.log
Please select the data directory for this instance [/var/lib/redis/6379] 
Selected default - /var/lib/redis/6379
Please select the redis executable path [/usr/local/bin/redis-server] 
Selected config:
Port           : 6379
Config file    : /etc/redis/6379.conf
Log file       : /var/log/redis_6379.log
Data dir       : /var/lib/redis/6379
Executable     : /usr/local/bin/redis-server
Cli Executable : /usr/local/bin/redis-cli
Is this ok? Then press ENTER to go on or Ctrl-C to abort.
Copied /tmp/6379.conf => /etc/init.d/redis_6379
Installing service...
Successfully added to chkconfig!
Successfully added to runlevels 345!
Starting Redis server...
Installation successful!

Redis服务查看、开启、关闭:
a.通过ps -ef|grep redis命令查看Redis进程
b.开启Redis服务操作通过/etc/init.d/redis_6379 start命令，也可通过（service redis_6379 start）
c.关闭Redis服务操作通过/etc/init.d/redis_6379 stop命令，也可通过（service redis_6379 stop）

Redis的后台启动并运行需要通过配置文件中的参数设置。如果需要在后台运行，把daemonize配置项改为yes
修改redis.conf 把daemonize配置项改为yes 
bind 127.0.0.1 192.168.1.8

也可以 redis-server /etc/redis/6379.conf 带上配置文件启动

redis.conf 的配置信息
1、daemonize 如果需要在后台运行，把该项改为yes
2、pidfile 配置多个pid的地址 默认在/var/run/redis.pid
3、bind 绑定ip，设置后只接受来自该ip的请求
4、port 监听端口，默认是6379
5、loglevel 分为4个等级：debug verbose notice warning
6、logfile 用于配置log文件地址
7、databases 设置数据库个数，默认使用的数据库为0
8、save 设置redis进行数据库镜像的频率。
9、rdbcompression 在进行镜像备份时，是否进行压缩
10、dbfilename 镜像备份文件的文件名
11、Dir 数据库镜像备份的文件放置路径
12、Slaveof 设置数据库为其他数据库的从数据库
13、Masterauth 主数据库连接需要的密码验证
14、Requriepass 设置 登陆时需要使用密码
15、Maxclients 限制同时使用的客户数量
16、Maxmemory 设置redis能够使用的最大内存
17、Appendonly 开启append only模式
18、Appendfsync 设置对appendonly.aof文件同步的频率（对数据进行备份的第二种方式）
19、vm-enabled 是否开启虚拟内存支持 （vm开头的参数都是配置虚拟内存的）
20、vm-swap-file 设置虚拟内存的交换文件路径
21、vm-max-memory 设置redis使用的最大物理内存大小
22、vm-page-size 设置虚拟内存的页大小
23、vm-pages 设置交换文件的总的page数量
24、vm-max-threads 设置VM IO同时使用的线程数量
25、Glueoutputbuf 把小的输出缓存存放在一起
26、hash-max-zipmap-entries 设置hash的临界值
27、Activerehashing 重新hash

-----------------------------------------------------------------------------------------------
zookeeper安装
下载
wget http://219.238.7.73/files/703900000A354B91/apache.fayea.com/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz
解压tar -zxvf zookeeper-3.4.9.tar.gz -C /opt/
cd /opt/zookeeper-3.4.9/conf
cp zoo_sample.cfg zoo.cfg #将sample配置文件复制为正式的配置文件
vi zoo.cfg #开始编辑

dataDir=/opt/zookeeper-3.4.9/data　　　　#数据目录
dataLogDir=/opt/zookeeper-3.4.9/logs　　#日志目录
server.0=hslave0:2888:3888         
server.1=hslave1:2888:3888
server.2=hslave2:2888:3888

启动：
/opt/zookeeper-3.4.6/bin/zkServer.sh start
检查运行情况
/opt/zookeeper-3.4.6/bin/zkServer.sh status


vi /home/zookeeper/data/myid #创建myid文件，并编辑它，
编辑的内容就是配置文件中server.后面跟着的号数。
例如目前是在slave0机器上，则在myid文件中写入0

kafka下载
wget http://mirror.bit.edu.cn/apache/kafka/0.11.0.0/kafka_2.12-0.11.0.0.tgz
tar -zxvf kafka_2.12-0.11.0.0.tgz -C /usr/local/kafka
1.启动Zookeeper
bin/zookeeper-server-start.sh -daemon config/zookeeper.properties

修改kafka下conf/server.properties 
zookeeper.connect=192.168.1.8:2181
listeners=PLAINTEXT://192.168.1.8:9092
2.启动Kafka 服务
bin/kafka-server-start.sh -daemon config/server.properties
3.创建topic
使用kafka-topics.sh 创建单分区单副本的topic test：
bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test
–topic指定topic name 
–partitions指定分区数，这个参数需要根据broker数和数据量决定，正常情况下，
每个broker上两个partition最好； 
–replication-factor指定partition的replicas数，建议设置为2；


查看topic：
bin/kafka-topics.sh --list --zookeeper localhost:2181
通过kafka-topics.sh工具的alter命令，将topic_test的partitions从12增加到20； 
bin/kafka-topics.sh –zookeeper 192.168.2.225:2181/config/mobile/mq –alter –partitions 20 –topic topic_test
查看topic详情
bin/kafka-topics.sh –zookeeper 192.168.2.225:2183/config/mobile/mq –describe –topic test.example 
 
Kafka 删除topic
bin/kafka-topics.sh --delete --zookeeper 192.168.1.8:2181 --topic oschina


4.产生消息
使用kafka-console-producer.sh 发送消息：
bin/kafka-console-producer.sh --broker-list 192.168.1.8:9092 --topic test 
Hello world！
Hello Kafka

5.消费消息
使用kafka-console-consumer.sh 接收消息并在终端打印：
bin/kafka-console-consumer.sh --zookeeper 192.168.1.8:2181 --topic angularjs --from-beginning
Hello world!
Hello Kafka




kafka管理工具
1、安装sbt
curl https://bintray.com/sbt/rpm/rpm |tee /etc/yum.repos.d/bintray-sbt-rpm.repo
yum install sbt

2、下载kafka manager
wget https://github.com/yahoo/kafka-manager/archive/1.3.3.13.tar.gz
https://github.com/yahoo/kafka-manager/archive/1.3.3.13.zip









